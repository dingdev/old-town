package ${package.ServiceImpl};

import ${package.Entity}.${entity};
import ${package.Mapper}.${table.mapperName};
import ${package.Service}.${table.serviceName};
import ${superServiceImplClassPackage};

import cn.hutool.core.util.StrUtil;
import com.baomidou.mybatisplus.core.conditions.Wrapper;
import com.baomidou.mybatisplus.core.conditions.query.LambdaQueryWrapper;
import com.baomidou.mybatisplus.core.conditions.query.QueryWrapper;
import com.baomidou.mybatisplus.extension.plugins.pagination.Page;
import org.springframework.stereotype.Service;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.transaction.interceptor.TransactionAspectSupport;
import javax.annotation.Resource;
import java.util.Date;
import java.util.List;
import $!{cfg.pkg}.common.api.CommonResult;

/**
 * <p>
 * $!{table.comment} 服务实现类
 * </p>
 * @author ${author}
 * @since ${date}
 */
@Service
#if(${kotlin})
open class ${table.serviceImplName} : ${superServiceImplClass}<${table.mapperName}, ${entity}>(), ${table.serviceName} {

}
#else
public class ${table.serviceImplName} extends ${superServiceImplClass}<${table.mapperName}, ${entity}> implements ${table.serviceName} {
    #set ($mpr = $table.mapperName.substring(0,1).toLowerCase() + $table.mapperName.substring(1,$table.mapperName.length()))
    #set ($ent = $entity.substring(0,1).toLowerCase() + $entity.substring(1,$entity.length()))
    private final Logger LOGGER = LoggerFactory.getLogger(${table.serviceImplName}.class);

    @Resource
    ${table.mapperName} ${mpr};

    /**
     * 分页查询$!{table.comment}
     * @return
     */
    @Override
    public CommonResult getAll(Integer pageSize, Integer pageNum, String keyword) {

        QueryWrapper<${entity}> wrapper = new QueryWrapper<>();
        LambdaQueryWrapper<${entity}> lambda = wrapper.lambda();
        if (StrUtil.isNotBlank(keyword)) {
            lambda.like(${entity}::getName, keyword);
        }
        if (pageNum == null){
            return CommonResult.success(${mpr}.selectList(wrapper));
        } else {
            Page<${entity}> page = new Page<>(pageNum, pageSize);
            return CommonResult.success( page(page,wrapper));
        }
    }


    /**
     * 增加$!{table.comment}
     */
    @Override
    @Transactional(rollbackFor = Exception.class)
    public CommonResult add(${entity} ${ent}) {
        try {

            ${ent}.setCreateTime(new Date());
            ${mpr}.insert(${ent});

            return CommonResult.success("成功增加$!{table.comment}:"+${ent}.getId(),${ent}.getId()+"");
        } catch (Exception e) {
            LOGGER.error("", e);
            TransactionAspectSupport.currentTransactionStatus().setRollbackOnly();
            return CommonResult.failed("增加$!{table.comment}失败:"+e.getMessage());
        }
    }

    /**
     * 更新$!{table.comment}
     */
    @Override
    @Transactional(rollbackFor = Exception.class)
    public CommonResult update(${entity} ${ent}) {
        try {

            Long id = ${ent}.getId();
            if (${mpr}.selectById(id) == null) {
                return CommonResult.failed("该$!{table.comment}不存在:"+id);
            }

            ${mpr}.updateById(${ent});

            return CommonResult.success("成功更新$!{table.comment}:"+id,id+"");
        } catch (Exception e) {
            LOGGER.error("", e);
            TransactionAspectSupport.currentTransactionStatus().setRollbackOnly();
            return CommonResult.failed("更新$!{table.comment}失败:"+e.getMessage());
        }
    }

    /**
     * 删除$!{table.comment}
     */
    @Override
    @Transactional(rollbackFor = Exception.class)
    public CommonResult delete(Long id) {
        try {

            if (${mpr}.selectById(id) == null) {
                return CommonResult.failed("该$!{table.comment}不存在:"+id);
            }

            ${mpr}.deleteById(id);
            return CommonResult.success("成功删除$!{table.comment}:"+id,id+"");
        } catch (Exception e) {
            LOGGER.error("", e);
            TransactionAspectSupport.currentTransactionStatus().setRollbackOnly();
            return CommonResult.failed("删除$!{table.comment}失败:"+e.getMessage());
        }
    }

    /**
     * 批量删除$!{table.comment}
     */
    @Override
    @Transactional(rollbackFor = Exception.class)
    public CommonResult batchDelete(List<Long> ids) {
        try {
            int deleteNum = ${mpr}.deleteBatchIds(ids);
            return CommonResult.success("成功删除$!{table.comment}"+deleteNum+"个",deleteNum+"");
        } catch (Exception e) {
            LOGGER.error("", e);
            TransactionAspectSupport.currentTransactionStatus().setRollbackOnly();
            return CommonResult.failed("删除$!{table.comment}失败:"+e.getMessage());
        }
    }

}
#end
